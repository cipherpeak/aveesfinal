{
  "version": 3,
  "sources": ["../../@heroui/form/dist/chunk-YMDFNRVV.mjs", "../../@react-stately/form/dist/packages/@react-stately/form/src/useFormValidationState.ts", "../../@heroui/form/dist/chunk-ICU6NNET.mjs", "../../@heroui/form/dist/chunk-GVH3SVCP.mjs", "../../@react-aria/form/dist/packages/@react-aria/form/src/useFormValidation.ts", "../../@react-aria/label/dist/packages/@react-aria/label/src/useLabel.ts", "../../@react-aria/label/dist/packages/@react-aria/label/src/useField.ts"],
  "sourcesContent": ["\"use client\";\n\n// src/utils.ts\nimport { useContext, useMemo, useRef, useCallback } from \"react\";\nimport { mergeProps, mergeRefs } from \"@heroui/shared-utils\";\nvar DEFAULT_SLOT = Symbol(\"default\");\nfunction useObjectRef(ref) {\n  const objRef = useRef(null);\n  const cleanupRef = useRef(void 0);\n  const refEffect = useCallback(\n    (instance) => {\n      if (typeof ref === \"function\") {\n        const refCallback = ref;\n        const refCleanup = refCallback(instance);\n        return () => {\n          if (typeof refCleanup === \"function\") {\n            refCleanup();\n          } else {\n            refCallback(null);\n          }\n        };\n      } else if (ref) {\n        ref.current = instance;\n        return () => {\n          ref.current = null;\n        };\n      }\n    },\n    [ref]\n  );\n  return useMemo(\n    () => ({\n      get current() {\n        return objRef.current;\n      },\n      set current(value) {\n        objRef.current = value;\n        if (cleanupRef.current) {\n          cleanupRef.current();\n          cleanupRef.current = void 0;\n        }\n        if (value != null) {\n          cleanupRef.current = refEffect(value);\n        }\n      }\n    }),\n    [refEffect]\n  );\n}\nfunction useSlottedContext(context, slot) {\n  let ctx = useContext(context);\n  if (slot === null) {\n    return null;\n  }\n  if (ctx && typeof ctx === \"object\" && \"slots\" in ctx && ctx.slots) {\n    let availableSlots = new Intl.ListFormat().format(Object.keys(ctx.slots).map((p) => `\"${p}\"`));\n    if (!slot && !ctx.slots[DEFAULT_SLOT]) {\n      throw new Error(`A slot prop is required. Valid slot names are ${availableSlots}.`);\n    }\n    let slotKey = slot || DEFAULT_SLOT;\n    if (!ctx.slots[slotKey]) {\n      throw new Error(`Invalid slot \"${slot}\". Valid slot names are ${availableSlots}.`);\n    }\n    return ctx.slots[slotKey];\n  }\n  return ctx;\n}\nfunction useContextProps(props, ref, context) {\n  let ctx = useSlottedContext(context, props.slot) || {};\n  let { ref: contextRef, ...contextProps } = ctx;\n  let mergedRef = useObjectRef(useMemo(() => mergeRefs(ref, contextRef), [ref, contextRef]));\n  let mergedProps = mergeProps(contextProps, props);\n  if (\"style\" in contextProps && contextProps.style && \"style\" in props && props.style) {\n    if (typeof contextProps.style === \"function\" || typeof props.style === \"function\") {\n      mergedProps.style = (renderProps) => {\n        let contextStyle = typeof contextProps.style === \"function\" ? contextProps.style(renderProps) : contextProps.style;\n        let defaultStyle = { ...renderProps.defaultStyle, ...contextStyle };\n        let style = typeof props.style === \"function\" ? props.style({ ...renderProps, defaultStyle }) : props.style;\n        return { ...defaultStyle, ...style };\n      };\n    } else {\n      mergedProps.style = { ...contextProps.style, ...props.style };\n    }\n  }\n  return [mergedProps, mergedRef];\n}\n\nexport {\n  DEFAULT_SLOT,\n  useObjectRef,\n  useSlottedContext,\n  useContextProps\n};\n", "/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {Context, createContext, useContext, useEffect, useMemo, useRef, useState} from 'react';\nimport {Validation, ValidationErrors, ValidationFunction, ValidationResult} from '@react-types/shared';\n\nexport const VALID_VALIDITY_STATE: ValidityState = {\n  badInput: false,\n  customError: false,\n  patternMismatch: false,\n  rangeOverflow: false,\n  rangeUnderflow: false,\n  stepMismatch: false,\n  tooLong: false,\n  tooShort: false,\n  typeMismatch: false,\n  valueMissing: false,\n  valid: true\n};\n\nconst CUSTOM_VALIDITY_STATE: ValidityState = {\n  ...VALID_VALIDITY_STATE,\n  customError: true,\n  valid: false\n};\n\nexport const DEFAULT_VALIDATION_RESULT: ValidationResult = {\n  isInvalid: false,\n  validationDetails: VALID_VALIDITY_STATE,\n  validationErrors: []\n};\n\nexport const FormValidationContext: Context<ValidationErrors> = createContext<ValidationErrors>({});\n\nexport const privateValidationStateProp: string = '__formValidationState' + Date.now();\n\ninterface FormValidationProps<T> extends Validation<T> {\n  builtinValidation?: ValidationResult,\n  name?: string | string[],\n  value: T | null\n}\n\nexport interface FormValidationState {\n  /** Realtime validation results, updated as the user edits the value. */\n  realtimeValidation: ValidationResult,\n  /** Currently displayed validation results, updated when the user commits their changes. */\n  displayValidation: ValidationResult,\n  /** Updates the current validation result. Not displayed to the user until `commitValidation` is called. */\n  updateValidation(result: ValidationResult): void,\n  /** Resets the displayed validation state to valid when the user resets the form. */\n  resetValidation(): void,\n  /** Commits the realtime validation so it is displayed to the user. */\n  commitValidation(): void\n}\n\nexport function useFormValidationState<T>(props: FormValidationProps<T>): FormValidationState {\n  // Private prop for parent components to pass state to children.\n  if (props[privateValidationStateProp]) {\n    let {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation} = props[privateValidationStateProp] as FormValidationState;\n    return {realtimeValidation, displayValidation, updateValidation, resetValidation, commitValidation};\n  }\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return useFormValidationStateImpl(props);\n}\n\nfunction useFormValidationStateImpl<T>(props: FormValidationProps<T>): FormValidationState {\n  let {isInvalid, validationState, name, value, builtinValidation, validate, validationBehavior = 'aria'} = props;\n\n  // backward compatibility.\n  if (validationState) {\n    isInvalid ||= validationState === 'invalid';\n  }\n\n  // If the isInvalid prop is controlled, update validation result in realtime.\n  let controlledError: ValidationResult | null = isInvalid !== undefined ? {\n    isInvalid,\n    validationErrors: [],\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n\n  // Perform custom client side validation.\n  let clientError: ValidationResult | null = useMemo(() => {\n    if (!validate || value == null) {\n      return null;\n    }\n    let validateErrors = runValidate(validate, value);\n    return getValidationResult(validateErrors);\n  }, [validate, value]);\n\n  if (builtinValidation?.validationDetails.valid) {\n    builtinValidation = undefined;\n  }\n\n  // Get relevant server errors from the form.\n  let serverErrors = useContext(FormValidationContext);\n  let serverErrorMessages = useMemo(() => {\n    if (name) {\n      return Array.isArray(name) ? name.flatMap(name => asArray(serverErrors[name])) : asArray(serverErrors[name]);\n    }\n    return [];\n  }, [serverErrors, name]);\n\n  // Show server errors when the form gets a new value, and clear when the user changes the value.\n  let [lastServerErrors, setLastServerErrors] = useState(serverErrors);\n  let [isServerErrorCleared, setServerErrorCleared] = useState(false);\n  if (serverErrors !== lastServerErrors) {\n    setLastServerErrors(serverErrors);\n    setServerErrorCleared(false);\n  }\n\n  let serverError: ValidationResult | null = useMemo(() =>\n    getValidationResult(isServerErrorCleared ? [] : serverErrorMessages),\n    [isServerErrorCleared, serverErrorMessages]\n  );\n\n  // Track the next validation state in a ref until commitValidation is called.\n  let nextValidation = useRef(DEFAULT_VALIDATION_RESULT);\n  let [currentValidity, setCurrentValidity] = useState(DEFAULT_VALIDATION_RESULT);\n\n  let lastError = useRef(DEFAULT_VALIDATION_RESULT);\n  let commitValidation = () => {\n    if (!commitQueued) {\n      return;\n    }\n\n    setCommitQueued(false);\n    let error = clientError || builtinValidation || nextValidation.current;\n    if (!isEqualValidation(error, lastError.current)) {\n      lastError.current = error;\n      setCurrentValidity(error);\n    }\n  };\n\n  let [commitQueued, setCommitQueued] = useState(false);\n  useEffect(commitValidation);\n\n  // realtimeValidation is used to update the native input element's state based on custom validation logic.\n  // displayValidation is the currently displayed validation state that the user sees (e.g. on input change/form submit).\n  // With validationBehavior=\"aria\", all errors are displayed in realtime rather than on submit.\n  let realtimeValidation = controlledError || serverError || clientError || builtinValidation || DEFAULT_VALIDATION_RESULT;\n  let displayValidation = validationBehavior === 'native'\n    ? controlledError || serverError || currentValidity\n    : controlledError || serverError || clientError || builtinValidation || currentValidity;\n\n  return {\n    realtimeValidation,\n    displayValidation,\n    updateValidation(value) {\n      // If validationBehavior is 'aria', update in realtime. Otherwise, store in a ref until commit.\n      if (validationBehavior === 'aria' && !isEqualValidation(currentValidity, value)) {\n        setCurrentValidity(value);\n      } else {\n        nextValidation.current = value;\n      }\n    },\n    resetValidation() {\n      // Update the currently displayed validation state to valid on form reset,\n      // even if the native validity says it isn't. It'll show again on the next form submit.\n      let error = DEFAULT_VALIDATION_RESULT;\n      if (!isEqualValidation(error, lastError.current)) {\n        lastError.current = error;\n        setCurrentValidity(error);\n      }\n\n      // Do not commit validation after the next render. This avoids a condition where\n      // useSelect calls commitValidation inside an onReset handler.\n      if (validationBehavior === 'native') {\n        setCommitQueued(false);\n      }\n\n      setServerErrorCleared(true);\n    },\n    commitValidation() {\n      // Commit validation state so the user sees it on blur/change/submit. Also clear any server errors.\n      // Wait until after the next render to commit so that the latest value has been validated.\n      if (validationBehavior === 'native') {\n        setCommitQueued(true);\n      }\n      setServerErrorCleared(true);\n    }\n  };\n}\n\nfunction asArray<T>(v: T | T[]): T[] {\n  if (!v) {\n    return [];\n  }\n\n  return Array.isArray(v) ? v : [v];\n}\n\nfunction runValidate<T>(validate: ValidationFunction<T>, value: T): string[] {\n  if (typeof validate === 'function') {\n    let e = validate(value);\n    if (e && typeof e !== 'boolean') {\n      return asArray(e);\n    }\n  }\n\n  return [];\n}\n\nfunction getValidationResult(errors: string[]): ValidationResult | null {\n  return errors.length ? {\n    isInvalid: true,\n    validationErrors: errors,\n    validationDetails: CUSTOM_VALIDITY_STATE\n  } : null;\n}\n\nfunction isEqualValidation(a: ValidationResult | null, b: ValidationResult | null): boolean {\n  if (a === b) {\n    return true;\n  }\n\n  return !!a && !!b\n    && a.isInvalid === b.isInvalid\n    && a.validationErrors.length === b.validationErrors.length\n    && a.validationErrors.every((a, i) => a === b.validationErrors[i])\n    && Object.entries(a.validationDetails).every(([k, v]) => b.validationDetails[k] === v);\n}\n\nexport function mergeValidation(...results: ValidationResult[]): ValidationResult {\n  let errors = new Set<string>();\n  let isInvalid = false;\n  let validationDetails = {\n    ...VALID_VALIDITY_STATE\n  };\n\n  for (let v of results) {\n    for (let e of v.validationErrors) {\n      errors.add(e);\n    }\n\n    // Only these properties apply for checkboxes.\n    isInvalid ||= v.isInvalid;\n    for (let key in validationDetails) {\n      validationDetails[key] ||= v.validationDetails[key];\n    }\n  }\n\n  validationDetails.valid = !isInvalid;\n  return {\n    isInvalid,\n    validationErrors: [...errors],\n    validationDetails\n  };\n}\n", "\"use client\";\nimport {\n  useContextProps\n} from \"./chunk-YMDFNRVV.mjs\";\n\n// src/base-form.tsx\nimport { FormValidationContext } from \"@react-stately/form\";\nimport { createContext, forwardRef, useMemo } from \"react\";\nimport { form } from \"@heroui/theme\";\nimport { jsx } from \"react/jsx-runtime\";\nvar FormContext = createContext(null);\nvar Form = forwardRef(function Form2(props, ref) {\n  [props, ref] = useContextProps(props, ref, FormContext);\n  let { validationErrors, validationBehavior = \"native\", children, className, ...domProps } = props;\n  const styles = useMemo(() => form({ className }), [className]);\n  return /* @__PURE__ */ jsx(\"form\", { noValidate: validationBehavior !== \"native\", ...domProps, ref, className: styles, children: /* @__PURE__ */ jsx(FormContext.Provider, { value: { ...props, validationBehavior }, children: /* @__PURE__ */ jsx(FormValidationContext.Provider, { value: validationErrors != null ? validationErrors : {}, children }) }) });\n});\n\nexport {\n  FormContext,\n  Form\n};\n", "\"use client\";\nimport {\n  Form\n} from \"./chunk-ICU6NNET.mjs\";\n\n// src/form.tsx\nimport { useProviderContext } from \"@heroui/system\";\nimport { forwardRef } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Form2 = forwardRef(function Form3(props, ref) {\n  var _a, _b;\n  const globalContext = useProviderContext();\n  const validationBehavior = (_b = (_a = props.validationBehavior) != null ? _a : globalContext == null ? void 0 : globalContext.validationBehavior) != null ? _b : \"native\";\n  return /* @__PURE__ */ jsx(Form, { ...props, ref, validationBehavior });\n});\n\nexport {\n  Form2 as Form\n};\n", "/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {FormValidationState} from '@react-stately/form';\nimport {RefObject, Validation, ValidationResult} from '@react-types/shared';\nimport {setInteractionModality} from '@react-aria/interactions';\nimport {useEffect, useRef} from 'react';\nimport {useEffectEvent, useLayoutEffect} from '@react-aria/utils';\n\ntype ValidatableElement = HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;\n\ninterface FormValidationProps<T> extends Validation<T> {\n  focus?: () => void\n}\n\nexport function useFormValidation<T>(props: FormValidationProps<T>, state: FormValidationState, ref: RefObject<ValidatableElement | null> | undefined): void {\n  let {validationBehavior, focus} = props;\n\n  // This is a useLayoutEffect so that it runs before the useEffect in useFormValidationState, which commits the validation change.\n  useLayoutEffect(() => {\n    if (validationBehavior === 'native' && ref?.current && !ref.current.disabled) {\n      let errorMessage = state.realtimeValidation.isInvalid ? state.realtimeValidation.validationErrors.join(' ') || 'Invalid value.' : '';\n      ref.current.setCustomValidity(errorMessage);\n\n      // Prevent default tooltip for validation message.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=605277\n      if (!ref.current.hasAttribute('title')) {\n        ref.current.title = '';\n      }\n\n      if (!state.realtimeValidation.isInvalid) {\n        state.updateValidation(getNativeValidity(ref.current));\n      }\n    }\n  });\n\n  let isIgnoredReset = useRef(false);\n  let onReset = useEffectEvent(() => {\n    if (!isIgnoredReset.current) {\n      state.resetValidation();\n    }\n  });\n\n  let onInvalid = useEffectEvent((e: Event) => {\n    // Only commit validation if we are not already displaying one.\n    // This avoids clearing server errors that the user didn't actually fix.\n    if (!state.displayValidation.isInvalid) {\n      state.commitValidation();\n    }\n\n    // Auto focus the first invalid input in a form, unless the error already had its default prevented.\n    let form = ref?.current?.form;\n    if (!e.defaultPrevented && ref && form && getFirstInvalidInput(form) === ref.current) {\n      if (focus) {\n        focus();\n      } else {\n        ref.current?.focus();\n      }\n\n      // Always show focus ring.\n      setInteractionModality('keyboard');\n    }\n\n    // Prevent default browser error UI from appearing.\n    e.preventDefault();\n  });\n\n  let onChange = useEffectEvent(() => {\n    state.commitValidation();\n  });\n\n  useEffect(() => {\n    let input = ref?.current;\n    if (!input) {\n      return;\n    }\n\n    let form = input.form;\n\n    let reset = form?.reset;\n    if (form) {\n      // Try to detect React's automatic form reset behavior so we don't clear\n      // validation errors that are returned by server actions.\n      // To do this, we ignore programmatic form resets that occur outside a user event.\n      // This is best-effort. There may be false positives, e.g. setTimeout.\n      form.reset = () => {\n        // React uses MessageChannel for scheduling, so ignore 'message' events.\n        isIgnoredReset.current = !window.event || (window.event.type === 'message' && window.event.target instanceof MessagePort);\n        reset?.call(form);\n        isIgnoredReset.current = false;\n      };\n    }\n\n    input.addEventListener('invalid', onInvalid);\n    input.addEventListener('change', onChange);\n    form?.addEventListener('reset', onReset);\n    return () => {\n      input!.removeEventListener('invalid', onInvalid);\n      input!.removeEventListener('change', onChange);\n      form?.removeEventListener('reset', onReset);\n      if (form) {\n        // @ts-ignore\n        form.reset = reset;\n      }\n    };\n  }, [ref, onInvalid, onChange, onReset, validationBehavior]);\n}\n\nfunction getValidity(input: ValidatableElement) {\n  // The native ValidityState object is live, meaning each property is a getter that returns the current state.\n  // We need to create a snapshot of the validity state at the time this function is called to avoid unpredictable React renders.\n  let validity = input.validity;\n  return {\n    badInput: validity.badInput,\n    customError: validity.customError,\n    patternMismatch: validity.patternMismatch,\n    rangeOverflow: validity.rangeOverflow,\n    rangeUnderflow: validity.rangeUnderflow,\n    stepMismatch: validity.stepMismatch,\n    tooLong: validity.tooLong,\n    tooShort: validity.tooShort,\n    typeMismatch: validity.typeMismatch,\n    valueMissing: validity.valueMissing,\n    valid: validity.valid\n  };\n}\n\nfunction getNativeValidity(input: ValidatableElement): ValidationResult {\n  return {\n    isInvalid: !input.validity.valid,\n    validationDetails: getValidity(input),\n    validationErrors: input.validationMessage ? [input.validationMessage] : []\n  };\n}\n\nfunction getFirstInvalidInput(form: HTMLFormElement): ValidatableElement | null {\n  for (let i = 0; i < form.elements.length; i++) {\n    let element = form.elements[i] as ValidatableElement;\n    if (!element.validity.valid) {\n      return element;\n    }\n  }\n\n  return null;\n}\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaLabelingProps, DOMAttributes, DOMProps, LabelableProps} from '@react-types/shared';\nimport {ElementType, LabelHTMLAttributes} from 'react';\nimport {useId, useLabels} from '@react-aria/utils';\n\nexport interface LabelAriaProps extends LabelableProps, DOMProps, AriaLabelingProps {\n  /**\n   * The HTML element used to render the label, e.g. 'label', or 'span'.\n   * @default 'label'\n   */\n  labelElementType?: ElementType\n}\n\nexport interface LabelAria {\n  /** Props to apply to the label container element. */\n  labelProps: DOMAttributes | LabelHTMLAttributes<HTMLLabelElement>,\n  /** Props to apply to the field container element being labeled. */\n  fieldProps: AriaLabelingProps & DOMProps\n}\n\n/**\n * Provides the accessibility implementation for labels and their associated elements.\n * Labels provide context for user inputs.\n * @param props - The props for labels and fields.\n */\nexport function useLabel(props: LabelAriaProps): LabelAria {\n  let {\n    id,\n    label,\n    'aria-labelledby': ariaLabelledby,\n    'aria-label': ariaLabel,\n    labelElementType = 'label'\n  } = props;\n\n  id = useId(id);\n  let labelId = useId();\n  let labelProps = {};\n  if (label) {\n    ariaLabelledby = ariaLabelledby ? `${labelId} ${ariaLabelledby}` : labelId;\n    labelProps = {\n      id: labelId,\n      htmlFor: labelElementType === 'label' ? id : undefined\n    };\n  } else if (!ariaLabelledby && !ariaLabel && process.env.NODE_ENV !== 'production') {\n    console.warn('If you do not provide a visible label, you must specify an aria-label or aria-labelledby attribute for accessibility');\n  }\n\n  let fieldProps = useLabels({\n    id,\n    'aria-label': ariaLabel,\n    'aria-labelledby': ariaLabelledby\n  });\n\n  return {\n    labelProps,\n    fieldProps\n  };\n}\n", "/*\n * Copyright 2021 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {DOMAttributes, HelpTextProps, Validation} from '@react-types/shared';\nimport {LabelAria, LabelAriaProps, useLabel} from './useLabel';\nimport {mergeProps, useSlotId} from '@react-aria/utils';\n\nexport interface AriaFieldProps extends LabelAriaProps, HelpTextProps, Omit<Validation<any>, 'isRequired'> {}\n\nexport interface FieldAria extends LabelAria {\n  /** Props for the description element, if any. */\n  descriptionProps: DOMAttributes,\n  /** Props for the error message element, if any. */\n  errorMessageProps: DOMAttributes\n}\n\n/**\n * Provides the accessibility implementation for input fields.\n * Fields accept user input, gain context from their label, and may display a description or error message.\n * @param props - Props for the Field.\n */\nexport function useField(props: AriaFieldProps): FieldAria {\n  let {description, errorMessage, isInvalid, validationState} = props;\n  let {labelProps, fieldProps} = useLabel(props);\n\n  let descriptionId = useSlotId([Boolean(description), Boolean(errorMessage), isInvalid, validationState]);\n  let errorMessageId = useSlotId([Boolean(description), Boolean(errorMessage), isInvalid, validationState]);\n\n  fieldProps = mergeProps(fieldProps, {\n    'aria-describedby': [\n      descriptionId,\n      // Use aria-describedby for error message because aria-errormessage is unsupported using VoiceOver or NVDA. See https://github.com/adobe/react-spectrum/issues/1346#issuecomment-740136268\n      errorMessageId,\n      props['aria-describedby']\n    ].filter(Boolean).join(' ') || undefined\n  });\n\n  return {\n    labelProps,\n    fieldProps,\n    descriptionProps: {\n      id: descriptionId\n    },\n    errorMessageProps: {\n      id: errorMessageId\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": ["$69F46$createContext", "$69F46$useMemo", "$69F46$useContext", "name", "$69F46$useState", "$69F46$useRef", "$69F46$useEffect", "value", "a", "import_react", "import_react", "import_jsx_runtime", "Form2", "$9Gacy$useRef", "form", "$9Gacy$useEffect"]
}
