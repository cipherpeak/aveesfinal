import {
  $337b884510726a0d$export$14c98a7594375490,
  $3ad3f6e1647bc98d$export$80f3e147d781571c,
  $458b0a5536c1a7cf$export$40bfa8c7b0832715,
  $65484d02dcb7eb3e$export$457c3d6518dd4c6f,
  $9ab94262bd0047c7$export$420e68273165f4ec,
  $9bf71ea28793e738$export$1258395f99bf9cbf,
  $bdb11010cef70236$export$b4cc09c592e8fdb8,
  $e0b6e0b68ec7f50f$export$872b660ac5a1ff98
} from "./chunk-RXQPOJHA.js";
import {
  require_react
} from "./chunk-BQYK6RGN.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@react-aria/dialog/dist/useDialog.mjs
var import_react = __toESM(require_react(), 1);
function $40df3f8667284809$export$d55e7ee900f34e93(props, ref) {
  let { role = "dialog" } = props;
  let titleId = (0, $bdb11010cef70236$export$b4cc09c592e8fdb8)();
  titleId = props["aria-label"] ? void 0 : titleId;
  let isRefocusing = (0, import_react.useRef)(false);
  (0, import_react.useEffect)(() => {
    if (ref.current && !ref.current.contains(document.activeElement)) {
      (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(ref.current);
      let timeout = setTimeout(() => {
        if (document.activeElement === ref.current || document.activeElement === document.body) {
          isRefocusing.current = true;
          if (ref.current) {
            ref.current.blur();
            (0, $3ad3f6e1647bc98d$export$80f3e147d781571c)(ref.current);
          }
          isRefocusing.current = false;
        }
      }, 500);
      return () => {
        clearTimeout(timeout);
      };
    }
  }, [
    ref
  ]);
  (0, $337b884510726a0d$export$14c98a7594375490)();
  return {
    dialogProps: {
      ...(0, $65484d02dcb7eb3e$export$457c3d6518dd4c6f)(props, {
        labelable: true
      }),
      role,
      tabIndex: -1,
      "aria-labelledby": props["aria-labelledby"] || titleId,
      // Prevent blur events from reaching useOverlay, which may cause
      // popovers to close. Since focus is contained within the dialog,
      // we don't want this to occur due to the above useEffect.
      onBlur: (e) => {
        if (isRefocusing.current) e.stopPropagation();
      }
    },
    titleProps: {
      id: titleId
    }
  };
}

// node_modules/@heroui/use-aria-overlay/dist/index.mjs
var import_react2 = __toESM(require_react(), 1);
var visibleOverlays = [];
function useAriaOverlay(props, ref) {
  const {
    disableOutsideEvents = true,
    isDismissable = false,
    isKeyboardDismissDisabled = false,
    isOpen,
    onClose,
    shouldCloseOnBlur,
    shouldCloseOnInteractOutside
  } = props;
  (0, import_react2.useEffect)(() => {
    if (isOpen && !visibleOverlays.includes(ref)) {
      visibleOverlays.push(ref);
      return () => {
        let index = visibleOverlays.indexOf(ref);
        if (index >= 0) {
          visibleOverlays.splice(index, 1);
        }
      };
    }
  }, [isOpen, ref]);
  const onHide = () => {
    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {
      onClose();
    }
  };
  const onInteractOutsideStart = (e) => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if (visibleOverlays[visibleOverlays.length - 1] === ref) {
        if (disableOutsideEvents) {
          e.stopPropagation();
          e.preventDefault();
        }
      }
      if (getOverlayInteractionType(ref) !== "pressEnd") {
        onHide();
      }
    }
  };
  const onInteractOutside = (e) => {
    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {
      if (visibleOverlays[visibleOverlays.length - 1] === ref) {
        if (disableOutsideEvents) {
          e.stopPropagation();
          e.preventDefault();
        }
      }
      onHide();
    }
  };
  const onKeyDown = (e) => {
    if (e.key === "Escape" && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {
      e.stopPropagation();
      e.preventDefault();
      onHide();
    }
  };
  $e0b6e0b68ec7f50f$export$872b660ac5a1ff98({
    isDisabled: !(isDismissable && isOpen),
    onInteractOutside: isDismissable && isOpen ? onInteractOutside : void 0,
    onInteractOutsideStart,
    ref
  });
  const { focusWithinProps } = $9ab94262bd0047c7$export$420e68273165f4ec({
    isDisabled: !shouldCloseOnBlur,
    onBlurWithin: (e) => {
      if (!e.relatedTarget || $9bf71ea28793e738$export$1258395f99bf9cbf(e.relatedTarget)) {
        return;
      }
      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) {
        onHide();
      }
    }
  });
  const onPointerDownUnderlay = (e) => {
    if (e.target === e.currentTarget) {
      e.preventDefault();
    }
  };
  function getOverlayInteractionType(ref2) {
    const el = ref2.current;
    if (!el) return "unknown";
    const role = (el.getAttribute("role") || "").toLowerCase();
    const ariaModalAttr = el.getAttribute("aria-modal");
    if ((role === "dialog" || role === "alertdialog") && (ariaModalAttr === null || ariaModalAttr.toLowerCase() === "true")) {
      return "pressEnd";
    }
    if (["listbox", "menu", "tree", "grid", "combobox"].includes(role)) {
      return "pressStart";
    }
    return "unknown";
  }
  return {
    overlayProps: {
      onKeyDown,
      ...focusWithinProps
    },
    underlayProps: {
      onPointerDown: onPointerDownUnderlay
    }
  };
}

// node_modules/@react-stately/overlays/dist/useOverlayTriggerState.mjs
var import_react3 = __toESM(require_react(), 1);
function $fc909762b330b746$export$61c6a8c84e605fb6(props) {
  let [isOpen, setOpen] = (0, $458b0a5536c1a7cf$export$40bfa8c7b0832715)(props.isOpen, props.defaultOpen || false, props.onOpenChange);
  const open = (0, import_react3.useCallback)(() => {
    setOpen(true);
  }, [
    setOpen
  ]);
  const close = (0, import_react3.useCallback)(() => {
    setOpen(false);
  }, [
    setOpen
  ]);
  const toggle = (0, import_react3.useCallback)(() => {
    setOpen(!isOpen);
  }, [
    setOpen,
    isOpen
  ]);
  return {
    isOpen,
    setOpen,
    open,
    close,
    toggle
  };
}

export {
  $40df3f8667284809$export$d55e7ee900f34e93,
  useAriaOverlay,
  $fc909762b330b746$export$61c6a8c84e605fb6
};
//# sourceMappingURL=chunk-JRTATEOB.js.map
