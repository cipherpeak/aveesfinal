"use client";
import {
  $40df3f8667284809$export$d55e7ee900f34e93,
  $fc909762b330b746$export$61c6a8c84e605fb6,
  useAriaOverlay
} from "./chunk-JRTATEOB.js";
import {
  CloseIcon
} from "./chunk-GOWDRFKV.js";
import {
  useSafeLayoutEffect
} from "./chunk-D3V2XJSH.js";
import {
  TRANSITION_EASINGS,
  TRANSITION_VARIANTS
} from "./chunk-VTGC4MY7.js";
import {
  useAriaButton
} from "./chunk-FYC375XV.js";
import {
  $337b884510726a0d$export$14c98a7594375490,
  $337b884510726a0d$export$c6fdb837b070b4ff,
  $3ef42575df84b30b$export$9d1611c77c2fe928,
  $458b0a5536c1a7cf$export$40bfa8c7b0832715,
  $49c51c25361d4cd2$export$ee0f7cc6afcd1c18,
  $5e3802645cc19319$export$1c3ebcada18427bf,
  $86ea4cb521eb2e37$export$2317d149ed6f78c4,
  $e8a7022cf87cba2a$export$36da96379f79f245,
  $f7dceffc5ad7768b$export$4e328f61c538687f,
  $ff5963eb1fccf552$export$e08e3b67e392101e,
  chain,
  clsx,
  createContext2,
  dataAttr,
  forwardRef,
  mapPropsVariants,
  mergeProps,
  mergeRefs,
  modal,
  objectToDeps,
  useDOMRef,
  useProviderContext
} from "./chunk-RXQPOJHA.js";
import "./chunk-BTNRXTUH.js";
import {
  AnimatePresence,
  LazyMotion,
  m
} from "./chunk-2XL62SD4.js";
import "./chunk-AWNCFKJZ.js";
import "./chunk-APP2P4WD.js";
import {
  require_jsx_runtime
} from "./chunk-HOLCHQKJ.js";
import {
  require_react
} from "./chunk-BQYK6RGN.js";
import "./chunk-U7P2NEEE.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@heroui/modal/dist/chunk-UX6VCJJD.mjs
var [ModalProvider, useModalContext] = createContext2({
  name: "ModalContext",
  errorMessage: "useModalContext: `context` is undefined. Seems you forgot to wrap all popover components within `<Modal />`"
});

// node_modules/@heroui/modal/dist/chunk-FOPEYBSC.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var ModalBody = forwardRef((props, ref) => {
  const { as, children, className, ...otherProps } = props;
  const { slots, classNames, bodyId, setBodyMounted } = useModalContext();
  const domRef = useDOMRef(ref);
  const Component = as || "div";
  (0, import_react.useEffect)(() => {
    setBodyMounted(true);
    return () => setBodyMounted(false);
  }, [setBodyMounted]);
  return (0, import_jsx_runtime.jsx)(
    Component,
    {
      ref: domRef,
      className: slots.body({ class: clsx(classNames == null ? void 0 : classNames.body, className) }),
      id: bodyId,
      ...otherProps,
      children
    }
  );
});
ModalBody.displayName = "HeroUI.ModalBody";
var modal_body_default = ModalBody;

// node_modules/@heroui/modal/dist/chunk-I7NTTF2N.mjs
var scaleInOut = {
  enter: {
    scale: "var(--scale-enter)",
    y: "var(--slide-enter)",
    opacity: 1,
    willChange: "auto",
    transition: {
      scale: {
        duration: 0.4,
        ease: TRANSITION_EASINGS.ease
      },
      opacity: {
        duration: 0.4,
        ease: TRANSITION_EASINGS.ease
      },
      y: {
        type: "spring",
        bounce: 0,
        duration: 0.6
      }
    }
  },
  exit: {
    scale: "var(--scale-exit)",
    y: "var(--slide-exit)",
    opacity: 0,
    willChange: "transform",
    transition: {
      duration: 0.3,
      ease: TRANSITION_EASINGS.ease
    }
  }
};

// node_modules/@heroui/modal/dist/chunk-NWAOTABO.mjs
var import_react3 = __toESM(require_react(), 1);

// node_modules/@heroui/use-viewport-size/dist/index.mjs
var import_react2 = __toESM(require_react(), 1);
var visualViewport = typeof document !== "undefined" && window.visualViewport;
var IsSSRContext = import_react2.default.createContext(false);
function getSnapshot() {
  return false;
}
function getServerSnapshot() {
  return true;
}
function subscribe(onStoreChange) {
  return () => {
  };
}
function useIsSSR() {
  if (typeof import_react2.default["useSyncExternalStore"] === "function") {
    return import_react2.default["useSyncExternalStore"](subscribe, getSnapshot, getServerSnapshot);
  }
  return (0, import_react2.useContext)(IsSSRContext);
}
function useViewportSize() {
  let isSSR = useIsSSR();
  let [size, setSize] = (0, import_react2.useState)(() => isSSR ? { width: 0, height: 0 } : getViewportSize());
  (0, import_react2.useEffect)(() => {
    let onResize = () => {
      setSize((size2) => {
        let newSize = getViewportSize();
        if (newSize.width === size2.width && newSize.height === size2.height) {
          return size2;
        }
        return newSize;
      });
    };
    if (!visualViewport) {
      window.addEventListener("resize", onResize);
    } else {
      visualViewport.addEventListener("resize", onResize);
    }
    return () => {
      if (!visualViewport) {
        window.removeEventListener("resize", onResize);
      } else {
        visualViewport.removeEventListener("resize", onResize);
      }
    };
  }, []);
  return size;
}
function getViewportSize() {
  return {
    width: visualViewport && (visualViewport == null ? void 0 : visualViewport.width) || window.innerWidth,
    height: visualViewport && (visualViewport == null ? void 0 : visualViewport.height) || window.innerHeight
  };
}

// node_modules/@heroui/modal/dist/chunk-NWAOTABO.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var domAnimation = () => import("./dist-ADIZCUMX.js").then((res) => res.default);
var ModalContent = (props) => {
  const { as, children, role = "dialog", ...otherProps } = props;
  const {
    Component: DialogComponent,
    domRef,
    slots,
    classNames,
    motionProps,
    backdrop,
    closeButton,
    hideCloseButton,
    disableAnimation,
    getDialogProps,
    getBackdropProps,
    getCloseButtonProps,
    onClose
  } = useModalContext();
  const Component = as || DialogComponent || "div";
  const viewport = useViewportSize();
  const { dialogProps } = $40df3f8667284809$export$d55e7ee900f34e93(
    {
      role
    },
    domRef
  );
  const closeButtonContent = (0, import_react3.isValidElement)(closeButton) ? (0, import_react3.cloneElement)(closeButton, getCloseButtonProps()) : (0, import_jsx_runtime2.jsx)("button", { ...getCloseButtonProps(), children: (0, import_jsx_runtime2.jsx)(CloseIcon, {}) });
  const onKeyDown = (0, import_react3.useCallback)((e) => {
    if (e.key === "Tab" && e.nativeEvent.isComposing) {
      e.stopPropagation();
      e.preventDefault();
    }
  }, []);
  const contentProps = getDialogProps(mergeProps(dialogProps, otherProps));
  const content = (0, import_jsx_runtime2.jsxs)(Component, { ...contentProps, onKeyDown: chain(contentProps.onKeyDown, onKeyDown), children: [
    (0, import_jsx_runtime2.jsx)($86ea4cb521eb2e37$export$2317d149ed6f78c4, { onDismiss: onClose }),
    !hideCloseButton && closeButtonContent,
    typeof children === "function" ? children(onClose) : children,
    (0, import_jsx_runtime2.jsx)($86ea4cb521eb2e37$export$2317d149ed6f78c4, { onDismiss: onClose })
  ] });
  const backdropContent = (0, import_react3.useMemo)(() => {
    if (backdrop === "transparent") {
      return null;
    }
    if (disableAnimation) {
      return (0, import_jsx_runtime2.jsx)("div", { ...getBackdropProps() });
    }
    return (0, import_jsx_runtime2.jsx)(LazyMotion, { features: domAnimation, children: (0, import_jsx_runtime2.jsx)(
      m.div,
      {
        animate: "enter",
        exit: "exit",
        initial: "exit",
        variants: TRANSITION_VARIANTS.fade,
        ...getBackdropProps()
      }
    ) });
  }, [backdrop, disableAnimation, getBackdropProps]);
  const viewportStyle = {
    "--visual-viewport-height": viewport.height + "px"
  };
  const contents = disableAnimation ? (0, import_jsx_runtime2.jsx)(
    "div",
    {
      className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }),
      "data-slot": "wrapper",
      style: viewportStyle,
      children: content
    }
  ) : (0, import_jsx_runtime2.jsx)(LazyMotion, { features: domAnimation, children: (0, import_jsx_runtime2.jsx)(
    m.div,
    {
      animate: "enter",
      className: slots.wrapper({ class: classNames == null ? void 0 : classNames.wrapper }),
      "data-slot": "wrapper",
      exit: "exit",
      initial: "exit",
      variants: scaleInOut,
      ...motionProps,
      style: viewportStyle,
      children: content
    }
  ) });
  return (0, import_jsx_runtime2.jsxs)("div", { tabIndex: -1, children: [
    backdropContent,
    contents
  ] });
};
ModalContent.displayName = "HeroUI.ModalContent";
var modal_content_default = ModalContent;

// node_modules/@heroui/modal/dist/chunk-O5MCAK4F.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var ModalFooter = forwardRef((props, ref) => {
  const { as, children, className, ...otherProps } = props;
  const { slots, classNames } = useModalContext();
  const domRef = useDOMRef(ref);
  const Component = as || "footer";
  return (0, import_jsx_runtime3.jsx)(
    Component,
    {
      ref: domRef,
      className: slots.footer({ class: clsx(classNames == null ? void 0 : classNames.footer, className) }),
      ...otherProps,
      children
    }
  );
});
ModalFooter.displayName = "HeroUI.ModalFooter";
var modal_footer_default = ModalFooter;

// node_modules/@heroui/modal/dist/chunk-IGSAU2ZA.mjs
var import_react4 = __toESM(require_react(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var ModalHeader = forwardRef((props, ref) => {
  const { as, children, className, ...otherProps } = props;
  const { slots, classNames, headerId, setHeaderMounted } = useModalContext();
  const domRef = useDOMRef(ref);
  const Component = as || "header";
  (0, import_react4.useEffect)(() => {
    setHeaderMounted(true);
    return () => setHeaderMounted(false);
  }, [setHeaderMounted]);
  return (0, import_jsx_runtime4.jsx)(
    Component,
    {
      ref: domRef,
      className: slots.header({ class: clsx(classNames == null ? void 0 : classNames.header, className) }),
      id: headerId,
      ...otherProps,
      children
    }
  );
});
ModalHeader.displayName = "HeroUI.ModalHeader";
var modal_header_default = ModalHeader;

// node_modules/@heroui/use-aria-modal-overlay/dist/index.mjs
var import_react5 = __toESM(require_react(), 1);
function useAriaModalOverlay(props = {
  shouldBlockScroll: true
}, state, ref) {
  let { overlayProps, underlayProps } = useAriaOverlay(
    {
      ...props,
      isOpen: state.isOpen,
      onClose: state.close
    },
    ref
  );
  $49c51c25361d4cd2$export$ee0f7cc6afcd1c18({
    isDisabled: !state.isOpen || !props.shouldBlockScroll
  });
  $337b884510726a0d$export$14c98a7594375490();
  (0, import_react5.useEffect)(() => {
    if (state.isOpen && ref.current) {
      return $5e3802645cc19319$export$1c3ebcada18427bf([ref.current]);
    }
  }, [state.isOpen, ref]);
  return {
    modalProps: $3ef42575df84b30b$export$9d1611c77c2fe928(overlayProps),
    underlayProps
  };
}

// node_modules/@heroui/modal/dist/chunk-CWPHHQ5O.mjs
var import_react6 = __toESM(require_react(), 1);
function useModal(originalProps) {
  var _a, _b, _c;
  const globalContext = useProviderContext();
  const [props, variantProps] = mapPropsVariants(originalProps, modal.variantKeys);
  const {
    ref,
    as,
    className,
    classNames,
    isOpen,
    defaultOpen,
    onOpenChange,
    motionProps,
    closeButton,
    isDismissable = true,
    hideCloseButton = false,
    shouldBlockScroll = true,
    portalContainer,
    isKeyboardDismissDisabled = false,
    onClose,
    ...otherProps
  } = props;
  const Component = as || "section";
  const domRef = useDOMRef(ref);
  const closeButtonRef = (0, import_react6.useRef)(null);
  const [headerMounted, setHeaderMounted] = (0, import_react6.useState)(false);
  const [bodyMounted, setBodyMounted] = (0, import_react6.useState)(false);
  const disableAnimation = (_b = (_a = originalProps.disableAnimation) != null ? _a : globalContext == null ? void 0 : globalContext.disableAnimation) != null ? _b : false;
  const dialogId = (0, import_react6.useId)();
  const headerId = (0, import_react6.useId)();
  const bodyId = (0, import_react6.useId)();
  const state = $fc909762b330b746$export$61c6a8c84e605fb6({
    isOpen,
    defaultOpen,
    onOpenChange: (isOpen2) => {
      onOpenChange == null ? void 0 : onOpenChange(isOpen2);
      if (!isOpen2) {
        onClose == null ? void 0 : onClose();
      }
    }
  });
  const { modalProps, underlayProps } = useAriaModalOverlay(
    {
      isDismissable,
      shouldBlockScroll,
      isKeyboardDismissDisabled
    },
    state,
    domRef
  );
  const { buttonProps: closeButtonProps } = useAriaButton({ onPress: state.close }, closeButtonRef);
  const { isFocusVisible: isCloseButtonFocusVisible, focusProps: closeButtonFocusProps } = $f7dceffc5ad7768b$export$4e328f61c538687f();
  const baseStyles = clsx(classNames == null ? void 0 : classNames.base, className);
  const slots = (0, import_react6.useMemo)(
    () => modal({
      ...variantProps,
      disableAnimation
    }),
    [objectToDeps(variantProps), disableAnimation]
  );
  const getDialogProps = (props2 = {}, ref2 = null) => {
    var _a2;
    return {
      ref: mergeRefs(ref2, domRef),
      ...mergeProps(modalProps, otherProps, props2),
      className: slots.base({ class: clsx(baseStyles, props2.className) }),
      id: dialogId,
      "data-open": dataAttr(state.isOpen),
      "data-dismissable": dataAttr(isDismissable),
      "aria-modal": dataAttr(true),
      "data-placement": (_a2 = originalProps == null ? void 0 : originalProps.placement) != null ? _a2 : "right",
      "aria-labelledby": headerMounted ? headerId : void 0,
      "aria-describedby": bodyMounted ? bodyId : void 0
    };
  };
  const getBackdropProps = (0, import_react6.useCallback)(
    (props2 = {}) => ({
      className: slots.backdrop({ class: classNames == null ? void 0 : classNames.backdrop }),
      ...underlayProps,
      ...props2
    }),
    [slots, classNames, underlayProps]
  );
  const getCloseButtonProps = () => {
    return {
      role: "button",
      tabIndex: 0,
      "aria-label": "Close",
      "data-focus-visible": dataAttr(isCloseButtonFocusVisible),
      className: slots.closeButton({ class: classNames == null ? void 0 : classNames.closeButton }),
      ...mergeProps(closeButtonProps, closeButtonFocusProps)
    };
  };
  return {
    Component,
    slots,
    domRef,
    headerId,
    bodyId,
    motionProps,
    classNames,
    isDismissable,
    closeButton,
    hideCloseButton,
    portalContainer,
    shouldBlockScroll,
    backdrop: (_c = originalProps.backdrop) != null ? _c : "opaque",
    isOpen: state.isOpen,
    onClose: state.close,
    disableAnimation,
    setBodyMounted,
    setHeaderMounted,
    getDialogProps,
    getBackdropProps,
    getCloseButtonProps
  };
}

// node_modules/@heroui/modal/dist/chunk-UKLRQS27.mjs
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var Modal = forwardRef((props, ref) => {
  const { children, ...otherProps } = props;
  const context = useModal({ ...otherProps, ref });
  const overlay = (0, import_jsx_runtime5.jsx)($337b884510726a0d$export$c6fdb837b070b4ff, { portalContainer: context.portalContainer, children });
  return (0, import_jsx_runtime5.jsx)(ModalProvider, { value: context, children: context.disableAnimation && context.isOpen ? overlay : (0, import_jsx_runtime5.jsx)(AnimatePresence, { children: context.isOpen ? overlay : null }) });
});
Modal.displayName = "HeroUI.Modal";
var modal_default = Modal;

// node_modules/@heroui/use-callback-ref/dist/index.mjs
var import_react7 = __toESM(require_react(), 1);
function useCallbackRef(fn, deps = []) {
  const ref = (0, import_react7.useRef)(fn);
  useSafeLayoutEffect(() => {
    ref.current = fn;
  });
  return (0, import_react7.useCallback)((...args) => {
    var _a;
    return (_a = ref.current) == null ? void 0 : _a.call(ref, ...args);
  }, deps);
}

// node_modules/@heroui/use-disclosure/dist/index.mjs
var import_react8 = __toESM(require_react(), 1);
function useDisclosure(props = {}) {
  const {
    id: idProp,
    defaultOpen,
    isOpen: isOpenProp,
    onClose: onCloseProp,
    onOpen: onOpenProp,
    onChange = () => {
    }
  } = props;
  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);
  const onClosePropCallbackRef = useCallbackRef(onCloseProp);
  const [isOpen, setIsOpen] = $458b0a5536c1a7cf$export$40bfa8c7b0832715(isOpenProp, defaultOpen || false, onChange);
  const reactId = (0, import_react8.useId)();
  const id = idProp || reactId;
  const isControlled = isOpenProp !== void 0;
  const onClose = (0, import_react8.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(false);
    }
    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();
  }, [isControlled, onClosePropCallbackRef]);
  const onOpen = (0, import_react8.useCallback)(() => {
    if (!isControlled) {
      setIsOpen(true);
    }
    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();
  }, [isControlled, onOpenPropCallbackRef]);
  const onOpenChange = (0, import_react8.useCallback)(() => {
    const action = isOpen ? onClose : onOpen;
    action();
  }, [isOpen, onOpen, onClose]);
  return {
    isOpen: !!isOpen,
    onOpen,
    onClose,
    onOpenChange,
    isControlled,
    getButtonProps: (props2 = {}) => ({
      ...props2,
      "aria-expanded": isOpen,
      "aria-controls": id,
      onClick: $ff5963eb1fccf552$export$e08e3b67e392101e(props2.onClick, onOpenChange)
    }),
    getDisclosureProps: (props2 = {}) => ({
      ...props2,
      hidden: !isOpen,
      id
    })
  };
}

// node_modules/@heroui/use-draggable/dist/index.mjs
var import_react9 = __toESM(require_react(), 1);
function useDraggable(props) {
  const { targetRef, isDisabled = false, canOverflow = false } = props;
  const boundary = (0, import_react9.useRef)({ minLeft: 0, minTop: 0, maxLeft: 0, maxTop: 0 });
  const isDragging = (0, import_react9.useRef)(false);
  let transform = { offsetX: 0, offsetY: 0 };
  const onMoveStart = (0, import_react9.useCallback)(() => {
    var _a, _b, _c, _d, _e;
    isDragging.current = true;
    const { offsetX, offsetY } = transform;
    const targetRect = (_a = targetRef == null ? void 0 : targetRef.current) == null ? void 0 : _a.getBoundingClientRect();
    const targetLeft = (_b = targetRect == null ? void 0 : targetRect.left) != null ? _b : 0;
    const targetTop = (_c = targetRect == null ? void 0 : targetRect.top) != null ? _c : 0;
    const targetWidth = (_d = targetRect == null ? void 0 : targetRect.width) != null ? _d : 0;
    const targetHeight = (_e = targetRect == null ? void 0 : targetRect.height) != null ? _e : 0;
    const clientWidth = document.documentElement.clientWidth;
    const clientHeight = document.documentElement.clientHeight;
    const minLeft = -targetLeft + offsetX;
    const minTop = -targetTop + offsetY;
    const maxLeft = clientWidth - targetLeft - targetWidth + offsetX;
    const maxTop = clientHeight - targetTop - targetHeight + offsetY;
    boundary.current = {
      minLeft,
      minTop,
      maxLeft,
      maxTop
    };
  }, [transform, targetRef == null ? void 0 : targetRef.current]);
  const onMove = (0, import_react9.useCallback)(
    (e) => {
      if (isDisabled) {
        return;
      }
      const { offsetX, offsetY } = transform;
      const { minLeft, minTop, maxLeft, maxTop } = boundary.current;
      let moveX = offsetX + e.deltaX;
      let moveY = offsetY + e.deltaY;
      if (!canOverflow) {
        moveX = Math.min(Math.max(moveX, minLeft), maxLeft);
        moveY = Math.min(Math.max(moveY, minTop), maxTop);
      }
      transform = {
        offsetX: moveX,
        offsetY: moveY
      };
      if (targetRef == null ? void 0 : targetRef.current) {
        targetRef.current.style.transform = `translate(${moveX}px, ${moveY}px)`;
      }
    },
    [isDisabled, transform, boundary.current, canOverflow, targetRef == null ? void 0 : targetRef.current]
  );
  const onMoveEnd = (0, import_react9.useCallback)(() => {
    isDragging.current = false;
  }, []);
  const { moveProps } = $e8a7022cf87cba2a$export$36da96379f79f245({
    onMoveStart,
    onMove,
    onMoveEnd
  });
  const preventDefault = (0, import_react9.useCallback)((e) => {
    if (isDragging.current) {
      e.preventDefault();
    }
  }, []);
  (0, import_react9.useEffect)(() => {
    if (!isDisabled) {
      document.body.addEventListener("touchmove", preventDefault, { passive: false });
    }
    return () => {
      document.body.removeEventListener("touchmove", preventDefault);
    };
  }, [isDisabled, preventDefault]);
  return {
    moveProps: {
      ...moveProps,
      style: { cursor: !isDisabled ? "move" : void 0 }
    }
  };
}
export {
  modal_default as Modal,
  modal_body_default as ModalBody,
  modal_content_default as ModalContent,
  modal_footer_default as ModalFooter,
  modal_header_default as ModalHeader,
  ModalProvider,
  useDisclosure,
  useDraggable,
  useModal,
  useModalContext
};
//# sourceMappingURL=@heroui_modal.js.map
