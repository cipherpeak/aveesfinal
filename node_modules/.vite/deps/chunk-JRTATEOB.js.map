{
  "version": 3,
  "sources": ["../../@react-aria/dialog/dist/packages/@react-aria/dialog/src/useDialog.ts", "../../@heroui/use-aria-overlay/dist/index.mjs", "../../@react-stately/overlays/dist/packages/@react-stately/overlays/src/useOverlayTriggerState.ts"],
  "sourcesContent": ["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {AriaDialogProps} from '@react-types/dialog';\nimport {DOMAttributes, FocusableElement, RefObject} from '@react-types/shared';\nimport {filterDOMProps, useSlotId} from '@react-aria/utils';\nimport {focusSafely} from '@react-aria/interactions';\nimport {useEffect, useRef} from 'react';\nimport {useOverlayFocusContain} from '@react-aria/overlays';\n\nexport interface DialogAria {\n  /** Props for the dialog container element. */\n  dialogProps: DOMAttributes,\n\n  /** Props for the dialog title element. */\n  titleProps: DOMAttributes\n}\n\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(props: AriaDialogProps, ref: RefObject<FocusableElement | null>): DialogAria {\n  let {\n    role = 'dialog'\n  } = props;\n  let titleId: string | undefined = useSlotId();\n  titleId = props['aria-label'] ? undefined : titleId;\n\n  let isRefocusing = useRef(false);\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n\n      // Safari on iOS does not move the VoiceOver cursor to the dialog\n      // or announce that it has opened until it has rendered. A workaround\n      // is to wait for half a second, then blur and re-focus the dialog.\n      let timeout = setTimeout(() => {\n        // Check that the dialog is still focused, or focused was lost to the body.\n        if (document.activeElement === ref.current || document.activeElement === document.body) {\n          isRefocusing.current = true;\n          if (ref.current) {\n            ref.current.blur();\n            focusSafely(ref.current);\n          }\n          isRefocusing.current = false;\n        }\n      }, 500);\n\n      return () => {\n        clearTimeout(timeout);\n      };\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  // We do not use aria-modal due to a Safari bug which forces the first focusable element to be focused\n  // on mount when inside an iframe, no matter which element we programmatically focus.\n  // See https://bugs.webkit.org/show_bug.cgi?id=211934.\n  // useModal sets aria-hidden on all elements outside the dialog, so the dialog will behave as a modal\n  // even without aria-modal on the dialog itself.\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, {labelable: true}),\n      role,\n      tabIndex: -1,\n      'aria-labelledby': props['aria-labelledby'] || titleId,\n      // Prevent blur events from reaching useOverlay, which may cause\n      // popovers to close. Since focus is contained within the dialog,\n      // we don't want this to occur due to the above useEffect.\n      onBlur: e => {\n        if (isRefocusing.current) {\n          e.stopPropagation();\n        }\n      }\n    },\n    titleProps: {\n      id: titleId\n    }\n  };\n}\n", "// src/index.ts\nimport { isElementInChildOfActiveScope } from \"@react-aria/focus\";\nimport { useFocusWithin, useInteractOutside } from \"@react-aria/interactions\";\nimport { useEffect } from \"react\";\nvar visibleOverlays = [];\nfunction useAriaOverlay(props, ref) {\n  const {\n    disableOutsideEvents = true,\n    isDismissable = false,\n    isKeyboardDismissDisabled = false,\n    isOpen,\n    onClose,\n    shouldCloseOnBlur,\n    shouldCloseOnInteractOutside\n  } = props;\n  useEffect(() => {\n    if (isOpen && !visibleOverlays.includes(ref)) {\n      visibleOverlays.push(ref);\n      return () => {\n        let index = visibleOverlays.indexOf(ref);\n        if (index >= 0) {\n          visibleOverlays.splice(index, 1);\n        }\n      };\n    }\n  }, [isOpen, ref]);\n  const onHide = () => {\n    if (visibleOverlays[visibleOverlays.length - 1] === ref && onClose) {\n      onClose();\n    }\n  };\n  const onInteractOutsideStart = (e) => {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {\n      if (visibleOverlays[visibleOverlays.length - 1] === ref) {\n        if (disableOutsideEvents) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }\n      if (getOverlayInteractionType(ref) !== \"pressEnd\") {\n        onHide();\n      }\n    }\n  };\n  const onInteractOutside = (e) => {\n    if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.target)) {\n      if (visibleOverlays[visibleOverlays.length - 1] === ref) {\n        if (disableOutsideEvents) {\n          e.stopPropagation();\n          e.preventDefault();\n        }\n      }\n      onHide();\n    }\n  };\n  const onKeyDown = (e) => {\n    if (e.key === \"Escape\" && !isKeyboardDismissDisabled && !e.nativeEvent.isComposing) {\n      e.stopPropagation();\n      e.preventDefault();\n      onHide();\n    }\n  };\n  useInteractOutside({\n    isDisabled: !(isDismissable && isOpen),\n    onInteractOutside: isDismissable && isOpen ? onInteractOutside : void 0,\n    onInteractOutsideStart,\n    ref\n  });\n  const { focusWithinProps } = useFocusWithin({\n    isDisabled: !shouldCloseOnBlur,\n    onBlurWithin: (e) => {\n      if (!e.relatedTarget || isElementInChildOfActiveScope(e.relatedTarget)) {\n        return;\n      }\n      if (!shouldCloseOnInteractOutside || shouldCloseOnInteractOutside(e.relatedTarget)) {\n        onHide();\n      }\n    }\n  });\n  const onPointerDownUnderlay = (e) => {\n    if (e.target === e.currentTarget) {\n      e.preventDefault();\n    }\n  };\n  function getOverlayInteractionType(ref2) {\n    const el = ref2.current;\n    if (!el) return \"unknown\";\n    const role = (el.getAttribute(\"role\") || \"\").toLowerCase();\n    const ariaModalAttr = el.getAttribute(\"aria-modal\");\n    if ((role === \"dialog\" || role === \"alertdialog\") && (ariaModalAttr === null || ariaModalAttr.toLowerCase() === \"true\")) {\n      return \"pressEnd\";\n    }\n    if ([\"listbox\", \"menu\", \"tree\", \"grid\", \"combobox\"].includes(role)) {\n      return \"pressStart\";\n    }\n    return \"unknown\";\n  }\n  return {\n    overlayProps: {\n      onKeyDown,\n      ...focusWithinProps\n    },\n    underlayProps: {\n      onPointerDown: onPointerDownUnderlay\n    }\n  };\n}\nexport {\n  useAriaOverlay\n};\n", "/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {OverlayTriggerProps} from '@react-types/overlays';\nimport {useCallback} from 'react';\nimport {useControlledState} from '@react-stately/utils';\n\nexport interface OverlayTriggerState {\n  /** Whether the overlay is currently open. */\n  readonly isOpen: boolean,\n  /** Sets whether the overlay is open. */\n  setOpen(isOpen: boolean): void,\n  /** Opens the overlay. */\n  open(): void,\n  /** Closes the overlay. */\n  close(): void,\n  /** Toggles the overlay's visibility. */\n  toggle(): void\n}\n\n/**\n * Manages state for an overlay trigger. Tracks whether the overlay is open, and provides\n * methods to toggle this state.\n */\nexport function useOverlayTriggerState(props: OverlayTriggerProps): OverlayTriggerState  {\n  let [isOpen, setOpen] = useControlledState(props.isOpen, props.defaultOpen || false, props.onOpenChange);\n\n  const open = useCallback(() => {\n    setOpen(true);\n  }, [setOpen]);\n\n  const close = useCallback(() => {\n    setOpen(false);\n  }, [setOpen]);\n\n  const toggle = useCallback(() => {\n    setOpen(!isOpen);\n  }, [setOpen, isOpen]);\n\n  return {\n    isOpen,\n    setOpen,\n    open,\n    close,\n    toggle\n  };\n}\n"],
  "mappings": "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",
  "names": ["$i6df2$useRef", "$i6df2$useEffect", "import_react", "$hnMvi$useCallback"]
}
